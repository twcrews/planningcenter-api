<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="/" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Crews.Extensions.Primitives" #>
<#@ import namespace="Crews.PlanningCenter.Models.Calendar.V2018_08_01.Entities" #>
<#@ import namespace="Crews.PlanningCenter.Api.Generators.Services" #>
<#@ import namespace="Crews.PlanningCenter.Api.Generators.Extensions" #>
<#@ import namespace="Crews.PlanningCenter.Api.Generators.Models" #>
<#
  PlanningCenterApiReferenceService service = new(new()
    {
      BaseAddress = new("https://api.planningcenteronline.com/")
    });

  foreach (string productId in PlanningCenterApiReferenceService.Products)
  {
    string product = productId.ToPascalCase();
    foreach (string versionId in Task.Run(() => service.GetVersionsAsync(productId)).Result)
    {
      string version = $"V{versionId.ToSnakeCase()}";
      string contextName = $"{product}DocumentContext";
      IEnumerable<PlanningCenterResource> resources = Task.Run(() => service.GetResourcesAsync(productId, versionId)).Result;
#>
/*
=======================================================================
This code is automatically generated. Please do not modify it directly.
=======================================================================
*/

using Crews.PlanningCenter.Models.<#=product#>.<#=version#>.Entities;
using JsonApiFramework.ServiceModel.Configuration;

namespace Crews.PlanningCenter.Api.Resources.<#=product#>.<#=version#>;

<#=$"JSON API document context for the Planning Center {product} API.".ToXmlDocSummary()#>
public class <#=contextName#> : PlanningCenterDocumentContext
{
  internal <#=contextName#>(JsonApiFramework.JsonApi.Document document) : base(document) { }
  internal <#=contextName#>() : base() { }

  /// <inheritdoc />
  protected override void OnServiceModelCreating(IServiceModelBuilder builder)
  {
    base.OnServiceModelCreating(builder);
  
<#
      foreach (PlanningCenterResource resource in resources)
      {
#>
    builder.Configurations.Add(new <#=resource.EntityClrType.Name#>Configuration());
<#
      }
#>
  }

<#
      foreach (PlanningCenterResource resource in resources)
      {
        string fullTypeName = resource.EntityClrType.Name.EndsWith("Resource") 
          ? $"PlanningCenter.Models.{product}.{version}.Entities.{resource.EntityClrType.Name}"
          : resource.EntityClrType.Name;
#>
  internal class <#=resource.EntityClrType.Name#>Configuration : ResourceTypeBuilder<<#=fullTypeName#>> { public <#=resource.EntityClrType.Name#>Configuration() { } }
<#
      }
#>
}

<#
      SaveOutputToSubFolder(
        "../../Crews.PlanningCenter.Api/Resources/" +
        $"{product}/{version}",
        $"{contextName}.cs");
    }
  }
#>

<#+
private void SaveOutputToSubFolder(string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string newDirectoryName = Path.Combine(templateDirectory,folderName);
  if(!Directory.Exists(newDirectoryName))
    Directory.CreateDirectory(newDirectoryName);
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
#>